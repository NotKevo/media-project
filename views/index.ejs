<!DOCTYPE html>
<html data-bs-theme="dark">
  <head>
    <title><%= title %>: <%= subtitle %></title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/css/bootstrap.min.css"
      rel="stylesheet"
      crossorigin="anonymous" />
    <script src="https://cdn.jsdelivr.net/npm/gsap@3.12.7/dist/gsap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/gsap@3.12.7/dist/ScrollTrigger.min.js"></script>

    <!-- Chart Scripts -->
    <script src="https://cdn.amcharts.com/lib/5/index.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/percent.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/themes/Responsive.js"></script>

    <style>
      body {
        background: linear-gradient(-45deg, #6b6000, #0d3f71, #530045, #006f46);
        background-size: 400% 400%;
        animation: gradientAnimation 5s ease-in-out infinite;
        color: white;
        font-family: sans-serif;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
      }

      @keyframes gradientAnimation {
        0% {
          background-position: 0% 50%;
        }
        50% {
          background-position: 100% 50%;
        }
        100% {
          background-position: 0% 50%;
        }
      }

      .glassmorphism {
        background: rgba(255, 255, 255, 0.1);
        box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(5px);
        -webkit-backdrop-filter: blur(5px);
        border: 1px solid rgba(255, 255, 255, 0.3);
        border-radius: 10px;
        padding: 20px;
      }

      .form-control {
        background-color: rgba(255, 255, 255, 0.1);
        color: white;
        border: 1px solid rgba(255, 255, 255, 0.3);
      }

      .form-control:focus {
        background-color: rgba(255, 255, 255, 0.2);
        border-color: rgba(255, 255, 255, 0.5);
        box-shadow: 0 0 0 0.25rem rgba(255, 255, 255, 0.25);
      }

      progress {
        width: 100%;
        height: 20px;
        border-radius: 10px; /* Rounded corners */
        background-color: rgba(
          255,
          255,
          255,
          0.2
        ); /* Semi-transparent background */
        overflow: hidden; /* Hide overflow for the inner bar */
        -webkit-appearance: none; /* Remove default browser styling */
        -moz-appearance: none;
        appearance: none;
      }

      progress::-webkit-progress-bar {
        background-color: rgba(255, 255, 255, 0.2);
        border-radius: 10px;
      }

      progress::-webkit-progress-value {
        background-color: #007bff; /* Blue progress color */
        border-radius: 10px;
        transition: width 0.3s ease; /* Smooth transition */
      }

      progress::-moz-progress-bar {
        background-color: #007bff; /* Blue progress color */
        border-radius: 10px;
        transition: width 0.3s ease; /* Smooth transition */
      }

      .feedback {
        display: none; /* Initially hidden */
      }

      .feedback.show {
        display: block; /* Shown when the 'show' class is added */
      }

      label[for="duration"]::before {
        content: "‚è±Ô∏è"; /* Clock emoji */
        margin-right: 5px;
        font-size: 1.2em;
      }

      label[for="points"]::before {
        content: "üèÜ"; /* Trophy emoji */
        margin-right: 5px;
        font-size: 1.2em;
      }
    </style>
  </head>
  <body>
    <form id="quizForm" action="/" method="post" class="container mt-5">
      <header class="glassmorphism mb-4 sticky-top p-3">
        <progress
          max="<%= questions.length %>"
          min="0"
          value="0"
          id="progressBar"
          aria-label="Quiz Progress"
          class="w-100 mb-2"></progress>
        <label for="duration" class="me-3" title="duration in seconds">
          <input
            type="number"
            name="duration"
            id="duration"
            step="0.01"
            value="0"
            readonly
            class="form-control"
            aria-describedby="durationHelp" />
        </label>
        <label for="points" title="points in total">
          <input
            type="number"
            name="points"
            id="points"
            max="<%- questions.length * scoreEachQuestion %>"
            value="0"
            readonly
            class="form-control"
            aria-describedby="pointsHelp" />
        </label>
      </header>
      <main class="glassmorphism">
        <fieldset>
          <legend class="text-center">
            <h1><%= title %></h1>
            <h2><%= subtitle %></h2>
          </legend>
        </fieldset>
        <% for (let i = 0; i < questions.length; i++) { %>
        <fieldset class="mb-3">
          <legend><%= questions[i].question %></legend>
          <% for (let j = 0; j < questions[i].options.length; j++) { const
          questionId = questions[i].question.toLowerCase().replace(/[^_\w]+/g,
          '_').replace(/^_+|_+$/g, ''); const optionId =
          questions[i].options[j].toLowerCase().replace(/[^_\w]+/g,
          '_').replace(/^_+|_+$/g, ''); %>
          <label for="<%= questionId %>-<%= optionId %>" class="mb-2 d-block">
            <input
              type="radio"
              accesskey="<%= j + 1 %>"
              name="<%= questionId %>"
              value="<%= optionId %>"
              id="<%= questionId %>-<%= optionId %>"
              required
              onchange="handleAnswerChange(this, '<%= questions[i].answer %>', <%= scoreEachQuestion %>)" />
            <%= questions[i].options[j] %>
            <span
              id="<%= questionId %>-feedback-correct"
              class="feedback text-success"
              >‚úÖcorrect</span
            >
            <span
              id="<%= questionId %>-feedback-wrong"
              class="feedback text-danger"
              >‚ùåwrong <br />
              correct answer: <%= questions[i].answer %></span
            >
          </label>
          <% } %>
        </fieldset>
        <% } %>
      </main>
      <button type="submit" class="btn btn-primary mt-3">Submit Quiz</button>
    </form>
    <aside class="container mt-5 glassmorphism">
      <h2 class="mb-4">Performance</h2>
      <section class="glassmorphism p-3" id="totalAttempts">
        Total attempts: 0
      </section>
      <section class="glassmorphism p-3" id="attemptsPerDWMY">
        Attempts per day/week/month/year: 0
      </section>
      <section class="glassmorphism p-3" id="correctAnswers">
        Correct answers: 0
      </section>
      <section class="glassmorphism p-3" id="wrongAnswers">
        Wrong answers: 0
      </section>
    </aside>

    <div
      id="attemptsChart"
      style="width: 100%; height: 400px"
      class="container mt-4"></div>

    <div
      id="resultsChart"
      style="width: 100%; height: 400px"
      class="container mt-4"></div>

    <script>
        const questions = <%- JSON.stringify(questions) %>;
        let timerInterval;
        let startTime = 0;
        let totalAttempts = 0
        let attemptsData = {total: 10, daily: 2, weekly: 5, monthly: 20, yearly: 100};

        function startTimer() {
          startTime = Date.now();
          timerInterval = setInterval(() => {
            const elapsedTime = (Date.now() - startTime) / 1000;
            document.getElementById("duration").value = elapsedTime.toFixed(2);
          }, 10);
        }

        function stopTimer() {
          clearInterval(timerInterval);
        }

        function enableAllFieldsets() {
          document.querySelectorAll("fieldset").forEach(fieldset => fieldset.disabled = false);
        }

        function handleAnswerChange(radio, correctAnswer, scoreEachQuestion) {
          const fieldset = radio.closest("fieldset");
          const progressBar = document.getElementById("progressBar");
          const pointsInput = document.getElementById("points");
          const questionId = radio.name;
          const correctFeedbackSpan = document.getElementById(questionId + "-feedback-correct");
          const wrongFeedbackSpan = document.getElementById(questionId + "-feedback-wrong");

          // Disable the fieldset immediately to prevent further clicks
          fieldset.disabled = true;

          // Update the progress bar
          progressBar.value = parseInt(progressBar.value) + 1;

          // Check if the answer is correct
          if (
            radio.value ===
            correctAnswer
              .toLowerCase()
              .replace(/[^_\w]+/g, "_")
              .replace(/^_+|_+$/g, "")
          ) {
            pointsInput.value = parseInt(pointsInput.value) + scoreEachQuestion;
            correctFeedbackSpan.classList.add("show");
          } else {
            wrongFeedbackSpan.classList.add("show");
          }
        }

        // Function to create a pie chart
        function showResultsChart(correctCount, wrongCount) {
          // Create the root element for the chart
        var root = am5.Root.new("resultsChart");

        // Set themes
        root.setThemes([am5themes_Animated.new(root)]);

        // Create the chart
        var chart = root.container.children.push(
          am5percent.PieChart.new(root, {
            layout: root.verticalHorizontal,
          })
        );

        // Create series
        var series = chart.series.push(
          am5percent.PieSeries.new(root, {
            valueField: "value",
            categoryField: "category",
          })
        );

        // Add data
        series.data.setAll([
          { category: "Correct Answers", value: correctCount },
          { category: "Wrong Answers", value: wrongCount },
        ]);

        // Enable tooltips
        series.slices.template.set("tooltipText", "{category}: {value}");
        series.appear(1000, 100);
      }

      document
        .getElementById("quizForm").addEventListener("submit", async (event) => {
          event.preventDefault(); // Prevent the default form submission
          stopTimer();
          enableAllFieldsets();

          const formData = new FormData(event.target);
          const data = Object.fromEntries(formData.entries());

          try {
            const response = await fetch('/', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'},
              body: JSON.stringify(data),
            });

            if (!response.ok) {
            throw new Error('Network response was not ok');
          }
            const result = await response.json();
            console.log("Correct Answers Count:", result);

            totalAttempts++;

            const correctCount = result.correctAnswersCount;
            const wrongCount = questions.length - correctCount;

            console.log("Correct Count:", correctCount);
            console.log("Wrong Count:", wrongCount);

            document.getElementById("totalAttempts").innerText = `Total attempts: ${totalAttempts}`;
            document.getElementById("correctAnswers").innerText = `Correct answers: ${correctCount}`;
            document.getElementById("wrongAnswers").innerText = `Wrong answers: ${wrongCount}`;

            // Display the results chart
            showResultsChart(correctCount, wrongCount);

            } catch (error) {
              console.error('Error:', error);
            }
        });
    </script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/js/bootstrap.bundle.min.js"
      crossorigin="anonymous"></script>
  </body>
</html>
